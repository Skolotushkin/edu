# Глава 8: Переменные, константы и основные типы

## Переменные, константы и основные типы

### 1. Что вы узнаете из этой главы?
- Что такое переменная? Зачем они нам нужны?
- Что такое тип?
- Как создать переменную?
- Как присвоить значение переменной?
- Как использовать переменные?
- Что такое константа? В чем разница между константой и переменной?
- Как определить константу?
- Как использовать константы?

### 2. Рассмотренные технические концепции
- Переменная
- Постоянный
- Тип
- Нетипизированные константы

### 3. Переменная — это пространство в памяти
Переменная — это пространство в памяти компьютера, которое может содержать изменяемый фрагмент данных. Термин «переменная» происходит от латинского слова «variabilis», что означает «изменчивый». В программах мы можем создавать переменные, которые позволят вам сохранять информацию для последующего использования.

Например, мы хотим отслеживать количество гостей в отеле. Количество гостей может варьироваться. Мы можем создать переменную для хранения этой информации.

Переменная — это пространство в памяти компьютера.

× Бумажное и цифровое издание этой книги доступны [здесь](#).
Я также снял видеокурс по созданию реального проекта с помощью Go.

### 4. Где хранятся переменные?
Ранее мы говорили о ПЗУ, ОЗУ и вспомогательной памяти. Где хранится переменная Go? Ответ короткий; вы не можете выбрать, где он будет проводиться. Это ответственность компилятора, а не ваша!

### 5. Идентификатор переменной (имя)
В большинстве языков программирования (а также в Go) когда мы создаем переменную, мы связываем ее с идентификатором. Идентификатор — это «имя» переменной. Присвоение идентификаторов переменным позволяет нам быстро использовать их в нашей программе. Идентификатор состоит из букв и цифр. Идентификатор переменной будет использоваться внутри программы для обозначения значения, которое хранится внутри. Идентификатор должен быть кратким и описательным.

Для создания идентификаторов программисты могут проявить творческий подход. Но они должны следовать этим простым правилам:

- Идентификаторы состоят из:
  - Букв Юникода (например, А, а, В, б, О...)
  - Цифр Юникода (например: 0, 9, 3...)
- Идентификатор должен начинаться с буквы или символа подчеркивания `_`.

Некоторые идентификаторы не могут быть использованы, поскольку они зарезервированы языком:

- Зарезервированные слова: `break`, `default`, `func`, `interface`, `select`, `case`, `defer`, `go`, `map`, `struct`, `chan`, `else`, `goto`, `package`, `switch`, `const`, `fallthrough`, `if`, `range`, `type`, `continue`, `for`, `import`, `return`, `var`.

`numberOfGuests` является допустимым идентификатором переменной.

`113Guests` недопустим, потому что начинается с цифры.

### 6. Основные типы
Мы можем хранить информацию в переменной. Термин «информация» является расплывчатым; мы должны быть более точными. Нужно ли нам хранить цифры (1, 2000, 3), числа с плавающей запятой (2.45665), текст («Номер 112 для некурящих»)? Переменная имеет набор допустимых значений, которые мы можем ей присвоить. Этот набор является типом переменной. У типов есть названия.

Язык Go предварительно объявляет набор основных типов, которые вы можете сразу же использовать в своих программах. Вы также можете определить свои типы (мы увидим это позже). На данный момент мы сосредоточимся только на наиболее часто используемых типах:

- Строки символов:
  - Имя типа: `string`
  - Пример: `"офис управления"`, `"комната 265"`.

- Целые числа без знака:
  - Названия типов: `uint`, `uint8`, `uint16`, `uint32`, `uint64`
  - Пример: `2445`, `676`, `0`, `1`.

- Целые числа:
  - Имена типов: `int`, `int8`, `int16`, `int32`, `int64`
  - Пример: `-1245`, `65`, `78`.

- Булевы:
  - Название типа: `bool`
  - Пример: `true`, `false`.

- Числа с плавающей запятой:
  - Имя типа: `float32`, `float64`
  - Пример: `12.67`.

### 6.1 О числах 8, 16, 32 и 64
Возможно, вы заметили, что у нас есть пять разновидностей целых чисел: `int`, `int8`, `int16`, `int32`, `int64`. То же самое происходит и с целыми числами без знака. У нас есть `uint`, `uint8`, `uint16`, `uint32` и `uint64`. Для чисел с плавающей запятой выбор более ограничен: мы можем использовать `float32` или `float64`.

Если вы хотите сохранить число, которое не имеет знака, вы можете использовать типы целых чисел без знака. Эти типы бывают 5 вкусов:

- `uint8`
- `uint16`
- `uint32`
- `uint64`
- `uint`

За исключением последнего, к каждому из них добавляется номер. Число соответствует количеству бит памяти, выделенных для его хранения.

Если вы читали первый раздел, то знаете, что:

- Имея 8 бит памяти, мы можем хранить десятичные числа от 0 до \(2^7 + 2^6 + \ldots + 2^0 = 255\).
- С помощью 16 бит (2 байта) мы можем хранить числа от 0 до \(2^{15} + 2^{14} + \ldots + 2^0 = 65535\).
- С помощью 32 бит (4 байта) мы можем хранить числа от 0 до \(2^{31} + 2^{30} + \ldots + 2^0 = 4294967295\).
- С помощью 64 бит (8 байт) мы можем хранить числа от 0 до \(2^{63} + 2^{62} + \ldots + 2^0 = 18446744073709551615\).

Обратите внимание, что максимальное десятичное значение в 64 бита является очень высоким. Имейте это в виду! Если вам нужно сохранить значение, которое не превышает 255, используйте `uint8` вместо `uint64`. В противном случае вы потратите впустую память (потому что вы будете использовать только 8 бит из 64 бит, выделенных в памяти!).

Последний тип — `uint`. Если вы используете этот тип в своей программе, память, выделенная для вашего беззнакового целого числа, будет не менее 32 бит. Это будет зависеть от системы, на которой будет работать программа. Если это 32-битная система, то она будет эквивалентна `uint32`. Если система имеет 64 бита, то емкость памяти `uint` в ней будет идентична емкости `uint64`.

### 7. Объявление переменных
Если вы хотите использовать переменную в своей программе, вам необходимо объявить ее заранее.

### 7.1 Три действия, выполняемые при объявлении переменной
Когда вы объявляете переменную, она будет:

1. Привязана идентификатор к переменной.
2. Привязана тип к переменной.
3. Инициализировано значение переменной значением по умолчанию типа.

Если вы привыкли программировать первые два действия являются общими. А вот третий — нет. Идите и инициализируйте значение для вас по умолчанию его типа. Неинициализированные переменные в Go не существуют.

### 7.2 Объявление переменных без инициализатора
Синтаксис переменной декларации:

```go
var roomNumber int
var password string
```

На рисунке 2 показано, как объявлять переменные. В первом примере мы объявляем одну переменную типа `int` с именем `roomNumber`. Во втором мы объявляем две переменные в одной строке: `roomNumber` и `floorNumber`. Они относятся к типу `int`. Их значение будет равно 0 (что является нулевым значением типа `int`).

```go
package main

import "fmt"

func main() {
    var roomNumber, floorNumber int
    fmt.Println(roomNumber, floorNumber)

    var password string
    fmt.Println(password)
}
```

Эта программа выводит:

```
0 0
```

Переменная `password` типа `string` инициализируется нулевым значением типа `string`, которое представляет собой пустую строку `""`. Переменные `roomNumber` и `floorNumber` инициализируются нулевым значением типа `int`, равным 0.

Первая строка вывода программы является результатом `fmt.Println(password)`. Вторая строка является результатом `fmt.Println(roomNumber, floorNumber)`.

### 7.3 Объявление переменной с помощью инициализатора
Вы также можете объявить переменную и инициализировать ее значение напрямую. Возможный синтаксис показан на рисунке 3. Рассмотрим пример:

```go
package main

import "fmt"

func main() {
    var roomNumber, floorNumber int = 154, 3
    fmt.Println(roomNumber, floorNumber)

    var password = "notSecured"
    fmt.Println(password)
}
```

В функции `main` первый оператор объявляет две переменные `roomNumber` и `floorNumber`. Они имеют тип `int` и инициализируются значениями `154` и `3`. Затем программа выведет эти переменные.

Слева от знака равенства находится выражение или список выражений. Мы подробно рассмотрим выражения в другом разделе.

Затем определяем переменную `password`. Мы инициализируем ее значением `"notSecured"`. Обратите внимание, что тип не записывается. Go присваивает переменной тип значения инициализации. В данном случае тип `"notSecured"` представляет собой строку; таким образом, тип переменной `password` является строкой.

### 7.4 Объявление короткой переменной
Объявление короткой переменной исключает ключевое слово `var`. Знак `=` преобразуется в `:=`. Вы также можете использовать этот синтаксис для определения нескольких переменных одновременно.

```go
roomNumber := 154
```

Тип не записывается явно. Компилятор выведет его из выражения (или списка выражений).

Вот пример:

```go
package main

import "fmt"

func main() {
    roomNumber, floorNumber := 154, 3
    fmt.Println(roomNumber, floorNumber)
}
```

Предупреждение: объявление короткой переменной не может быть использовано вне функций!

```go
// will not compile
package main

varRat := 20

func main(){

}
```

Предупреждение: вы не можете использовать значение `nil` для объявления короткой переменной. Компилятор не может определить тип переменной.

× Бумажное и цифровое издание этой книги доступны [здесь](#).
Я также снял видеокурс по созданию реального проекта с помощью Go.

### 8. Что такое константа?
Слово «постоянный» происходит от латинского слова «constare», что означает «стоять твердо». Константа — это значение в вашей программе, которое будет оставаться неизменным и не будет меняться во время выполнения. Переменная может изменяться во время выполнения; константа не изменится; она останется постоянной.

Например, мы можем хранить в константе:

- Версию нашей программы. Например: `"1.3.2"`. Это значение будет оставаться стабильным во время выполнения программы. Мы изменим это значение при компиляции другой версии нашей программы.
- Время сборки программы.
- Шаблон письма (если он не настраивается нашим приложением).
- Сообщение об ошибке.

Подводя итог, можно сказать, что используйте константу, если вы уверены, что вам никогда не придется изменять значение во время выполнения программы. Мы говорим, что константа неизменяема. Константы бывают двух видов: типизированные и нетипизированные.

### 9. Типизированные константы
Вот типизированная константа:

```go
const version string = "1.3.2"
```

Ключевое слово `const` сигнализирует компилятору о том, что мы определяем константу. После ключевого слова `const` устанавливается идентификатор константы. В нашем примере идентификатором является `"version"`. Явно определяется тип (в данном случае строка), а также значение константы (в виде выражения).

### 10. Нетипизированные константы
Вот нетипизированная константа:

```go
const version = "1.3.2"
```

Нетипизированная константа:

- не имеет типа
- имеет тип по умолчанию
- не имеет ограничений

### 10.1 Нетипизированная константа не имеет типа...
Возьмем пример для демонстрации первого пункта (нетипизированная константа не имеет типа):

```go
package main

import "fmt"

func main() {
    const occupancyLimit = 12

    var occupancyLimit1 uint8
    var occupancyLimit2 int64
    var occupancyLimit3 float32

    // assign our untyped const to an uint8 variable
    occupancyLimit1 = occupancyLimit
    // assign our untyped const to an int64 variable
    occupancyLimit2 = occupancyLimit
    // assign our untyped const to a float32 variable
    occupancyLimit3 = occupancyLimit

    fmt.Println(occupancyLimit1, occupancyLimit2, occupancyLimit3)
}
```

В этой программе мы начнем с определения нетипизированной константы. Ее имя — `occupancyLimit`, а ее значение — `12`. На этом этапе программы константа не имеет определенного типа. За исключением того, что он был установлен в целочисленное значение.

Затем мы определяем 3 переменные: `occupancyLimit1`, `occupancyLimit2`, `occupancyLimit3` (типы этих переменных: `uint8`, `int64`, `float32`).

Затем мы присваиваем этим переменным значение `occupancyLimit`. Наша программа компилируется. Значение нашей константы можно задавать в переменные разных типов!

### 10.2 ...но тип по умолчанию, когда это необходимо
Чтобы разобраться в понятии типа по умолчанию, возьмем другой пример:

```go
package main

import "fmt"

func main() {
    const occupancyLimit = 12

    var occupancyLimit4 string

    occupancyLimit4 = occupancyLimit

    fmt.Println(occupancyLimit4)
}
```

В этой программе мы определяем константу `occupancyLimit`, которая имеет значение `12` (целое число). Определяем переменную `occupancyLimit4` со строковым типом. Затем мы пытаемся присвоить `occupancyLimit4` значение нашей константы.

Мы пытаемся преобразовать целое число в строку. Будет ли эта программа компилироваться? Мой ответ — нет! Ошибка компиляции:

```
./main.go:10:19: cannot use occupancyLimit (type int) as type string in assignment
```

Нетипизированная константа имеет тип по умолчанию, который определяется значением, присвоенным ей при компиляции. В нашем примере `occupancyLimit` имеет тип по умолчанию `int`. Значение `int` не может быть присвоено строковой переменной.

Типы нетипизированных констант по умолчанию:

- `bool` (для любого логического значения)
- `rune` (для любого значения руны)
- `int` (для любого целочисленного значения)
- `float64` (для любого значения с плавающей запятой)
- `complex128` (для любого сложного значения)
- `string` (для любого строкового значения)

```go
package main

func main() {
    // default type is bool
    const isOpen = true
    // default type is rune (alias for int32)
    const myRune = 'r'
    // default type is int
    const occupancyLimit = 12
    // default type is float64
    const vatRate = 29.87
    // default type is complex128
    const complexNumber = 1 + 2i
    // default type is string
    const hotelName = "Gopher Hotel"
}
```

### 10.3 Нетипизированная константа не имеет предела
Нетипизированная константа не имеет типа и имеет тип по умолчанию, когда это необходимо. Значение нетипизированной константы может превысить ее тип по умолчанию. Такая константа не имеет типа; следовательно, она не зависит от каких-либо ограничений типа. Рассмотрим пример:

```go
package main

func main() {
    // maximum value of an int is 9223372036854775807
    // 9223372036854775808 (max + 1) overflows int
    const profit = 9223372036854775808
    // the program compiles
}
```

В этой программе мы создаем нетипизированную константу с именем `profit`. Ее значение равно `9223372036854775808`, что превышает максимально допустимое значение для `int` (`int64` на моей 64-битной машине): `9223372036854775807`. Эта программа отлично компилируется. Но когда мы попытаемся присвоить это константное значение типизированной переменной, программа не будет компилироваться. Давайте рассмотрим пример, чтобы продемонстрировать это:

```go
package main

import "fmt"

func main() {
    // maximum value of an int is 9223372036854775807
    // 9223372036854775808 (max + 1) overflows int
    const profit = 9223372036854775808
    var profit2 int64 = profit
    fmt.Println(profit2)
}
```

Эта программа определяет переменную `profit2`, которая имеет тип `int64`. Затем мы пытаемся присвоить `profit2` значение нетипизированной константы `profit`.

Попробуем скомпилировать программу:

```sh
$ go build main.go
# command-line-arguments
./main.go:9:7: constant 9223372036854775808 overflows int64
```

Мы получаем ошибку компиляции, и это нормально. То, что мы пытаемся сделать, незаконно.

### 10.4 Зачем нужны константы?
- Вы улучшаете читаемость ваших программ.
  - Постоянный идентификатор, если он правильно выбран, даст читателю больше информации, чем исходное значение.
  - Сравните это:

```go
loc, err := time.LoadLocation(UKTimezoneName)
if err != nil {
  return nil, err
}
```

  - С этим:

```go
loc, err := time.LoadLocation("Europe/London")
if err != nil {
  return nil, err
}
```

  - Мы используем константу `UKTimezoneName` вместо исходного значения `"Europe/London"`. Мы скрываем сложность строки часового пояса от читателя. В дополнение к этому, читатель поймет, в чем заключалось наше намерение; мы хотим зафиксировать местоположение в Великобритании.

- Вы допускаете потенциальное повторное использование значения (другой программой или в вашей собственной программе).

- Компилятор может улучшить создаваемый машинный код. Вы говорите компилятору, что это значение никогда не изменится; если компилятор умный (а он умный), он будет использовать его оптимально.

### 11. Выбор идентификаторов (имена переменных, имена констант)
Именование переменных и констант — задача не из простых. Когда вы выбираете имя, вы должны быть уверены, что выбранное имя дает нужное количество информации о его назначении. Другие разработчики, которые работают над тем же проектом, будут благодарны, если вы выберете хорошее имя идентификатора, потому что чтение кода будет проще. Когда мы говорим «дать нужное количество информации», слово «правильный» звучит расплывчато. Не существует научных правил для именования конструкций программ. Несмотря на то, что научных правил не существует, я могу дать вам несколько советов, которыми делится наше сообщество.

- Избегайте имен с одной буквой: она передает слишком мало информации о том, что хранится.
  - Исключение составляют счетчики, которые часто называются `k`, `i` и `j` (внутренние циклы, о которых мы поговорим позже).
- Используйте верблюжий регистр: это устоявшаяся традиция в сообществе Go.
  - Предпочтите `occupancyLimit` вместо `occupancy_limit` или `ограничение по вместимости`.
- Не более двух слов.
  - `profitValue` хороший, `profitValueBeforeTaxMinusOperationalCosts` слишком длинный.
- Избегайте упоминания типа в имени.
  - `descriptionString` плохой, `description` лучше.
  - Go уже статически типизирован; вам не нужно сообщать читателю информацию о типе. (В некоторых слабо типизированных языках иногда необходимо избегать путаницы).

× Бумажное и цифровое издание этой книги доступны [здесь](#).
Я также снял видеокурс по созданию реального проекта с помощью Go.

### 12. Практическое применение
#### 12.1.1 Программа
Напишите программу, которая будет:

- Создать строковую константу с именем `hotelName` и значением `"Gopher Hotel"`.
- Создать две нетипизированные константы, которые будут содержать соответственно `24.806078` и `-78.243027`. Названия этих двух констант — `longitude` и `latitude`. (где-то на Багамах).
- Создать переменную типа `int` с именем `occupancy`, которая инициализируется значением `12`.
- Вывести долготу, широту и вместимость в новой строке.

#### 12.1.2 Вопросы
- Какой тип используется по умолчанию для `longitude` и `latitude`?
- Что такое тип `longitude`?
- Переменная `occupancy` имеет тип `int`. Это 64, 32 или 8-битное целое число?

#### 12.2 Объяснение решения
#### 12.2.1 Программа

```go
package main

import "fmt"

func main() {
    const hotelName string = "Gopher Hotel"
    const longitude = 24.806078
    const latitude = -78.243027
    var occupancy int = 12
    fmt.Println(hotelName, longitude, latitude)
    fmt.Println(occupancy)
}
```

Мы начнем с определения типизированной константы `hotelName` и определения `longitude` и `latitude` (которые не типизированы). Затем определяем переменную `occupancy` (тип: `int`) и устанавливаем ее значение равным `12`. Обратите внимание, что возможен и другой синтаксис:

```go
occupancy := 12
```

Тип может быть опущен в стандартном объявлении:

```go
var occupancy = 12
```

Мы можем разделить объявление переменной и присваивание на два шага:

```go
var occupancy int
occupancy = 12
```

#### 12.2.2 Ответы на вопросы
- Какой тип используется по умолчанию для `longitude` и `latitude`?

  `float64`

- Что такое тип `longitude`?

  У него нет типа, и то же самое для `latitude`.

- Переменная `occupancy` имеет тип `int`. Это 64, 32 или 8-битное целое число?

  `int` — это тип, который имеет размер, зависящий от реализации: на 32-битном компьютере это будет 32-битное целое число (`int32`); на 64-битном компьютере это будет 64-битное целое число (`int64`).

### 13. Проверьте себя
#### 13.1 Вопросы
- Что такое идентификатор?
- С какого типа символа должен начинаться идентификатор?
- Что такое тип переменной?
- Что такое байт?
- Когда вы объявляете переменную типа `bool`, каково ее значение (сразу после инициализации)?
- Каковы две основные характеристики нетипизированной константы?

#### 13.2 Ответы
- Что такое идентификатор?

  Идентификатор — это набор символов, состоящий из букв и цифр.

- С какого типа символа должен начинаться идентификатор?

  Буква или подчеркивание.

- Что такое тип переменной?

  Тип переменной — это набор допустимых значений переменной.

- Что такое байт?

  Байт состоит из 8 двоичных цифр.

- Когда вы объявляете переменную типа `bool`, каково ее значение (сразу после инициализации)?

  Ложное. Когда вы объявляете переменную, она инициализируется значением по умолчанию для ее типа.

- Каковы три характеристики нетипизированной константы?

  - У него нет типа.
  - У него есть тип по умолчанию.
  - У него нет ограничений.

### 14. Ключевые выводы
- Имя переменной или константы называется идентификатором.
- Идентификаторы обычно записываются с помощью `camelCase`.
- Переменные и константы позволяют сохранять значение в памяти.
- Константы неизменяемы, что означает, что мы не можем изменять их значение во время выполнения программы.
- Переменные имеют тип, который определяет набор значений, которые они могут хранить.
- При создании переменной ее значение инициализируется нулевым значением ее типа.
- Это очень важно...
  - Это может быть источником ошибок.
  - В Go НЕТ неинициализированных переменных.
- Существует два вида констант:
  - Типизированные.
  - Нетипизированные.
  - Не имеют другого типа, кроме типа по умолчанию, и могут превышать свой тип по умолчанию.
